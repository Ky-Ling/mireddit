type comment {
	username: String
	text: String
	post_id: ID
	post: post @materializer(query: "getPostUsingComment_post_id_fkey")
	id: ID!
	created_at: DateTime
}

type post {
	votes: [vote] @materializer(query: "getVote")
	username: String
	title: String
	subreddit_id: ID
	subreddit: [subreddit] @materializer(query: "getSubreddit")
	image: String
	id: ID!
	created_at: DateTime
	comments: [comment] @materializer(query: "getComment")
	body: String
}

type subreddit {
	topic: String
	post: [post] @materializer(query: "getPostUsingPost_subreddit_id_fkey")
	id: ID!
	created_at: DateTime
}

type vote {
	username: String
	upvote: Boolean
	post_id: ID
	post: post @materializer(query: "getPostByPostId")
	id: ID!
	created_at: DateTime
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
	" Queries for type 'comment' "
	comment(id: ID!): comment
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "comment"
			configuration: "postgresql_config"
		)
	commentList: [comment]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "comment"
			configuration: "postgresql_config"
		)
	commentPaginatedList(first: Int, after: Int): [comment]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" ORDER BY "id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	getComment(id: ID!): [comment]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "post_id", "text", "username" FROM "comment" WHERE "post_id" = $1
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'post' "
	getPostByPostId(post_id: ID!): post
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			select * from "post"
			where "post"."id" = $1
			"""
			configuration: "postgresql_config"
		)

	getPostListByTopic(topic: String!): [post]
		@dbquery(
			type: "postgresql"
			query: """
			select *, "post".id as id from "post"
			join "subreddit" on "subreddit"."id" = "post"."subreddit_id"
			where "subreddit"."topic" = $1
			order by "post"."created_at" desc
			"""
			configuration: "postgresql_config"
		)
	getPostUsingComment_post_id_fkey(post_id: ID!): post
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "body", "created_at", "id", "image", "subreddit_id", "title", "username" FROM "post" WHERE "id" = $1
			"""
			configuration: "postgresql_config"
		)
	getPostUsingPost_subreddit_id_fkey(id: ID!): [post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "body", "created_at", "id", "image", "subreddit_id", "title", "username" FROM "post" WHERE "subreddit_id" = $1
			"""
			configuration: "postgresql_config"
		)
	post(id: ID!): post
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "post"
			configuration: "postgresql_config"
		)
	postList: [post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			# table: "post"
			query: """
			select * from "post"
			order by "post"."created_at" desc
			"""
			configuration: "postgresql_config"
		)
	postPaginatedList(first: Int, after: Int): [post]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "body", "created_at", "id", "image", "subreddit_id", "title", "username" FROM "post" ORDER BY "id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'subreddit' "
	getSubreddit(subreddit_id: ID!): [subreddit]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "topic" FROM "subreddit" WHERE "id" = $1
			"""
			configuration: "postgresql_config"
		)
	subreddit(id: ID!): subreddit
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			configuration: "postgresql_config"
		)
	subredditList: [subreddit]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			configuration: "postgresql_config"
		)

	getSubredditListByTopic(topic: String!): [subreddit]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			select * from "subreddit" where "topic" = $1
			"""
			configuration: "postgresql_config"
		)

	getSubredditListLimit(limit: Int!): [subreddit] 
		@dbquery(
			type: "postgresql",
			query: """
				select * from "subreddit"
				order by "created_at" desc
				limit $1
			"""
			configuration: "postgresql_config"
		)

	subredditPaginatedList(first: Int, after: Int): [subreddit]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "topic" FROM "subreddit" ORDER BY "id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'vote' "
	getVote(id: ID!): [vote]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" WHERE "post_id" = $1
			"""
			configuration: "postgresql_config"
		)
	vote(id: ID!): vote
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			configuration: "postgresql_config"
		)
	voteList: [vote]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			configuration: "postgresql_config"
		)
	votePaginatedList(first: Int, after: Int): [vote]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "created_at", "id", "post_id", "upvote", "username" FROM "vote" ORDER BY "id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)

	getVotesByPostId(post_id: ID!): [vote]
		@dbquery(
			type: "postgresql"
			query: """
			select * from "vote" where "post_id" = $1
			order by "created_at" desc
			"""
			configuration: "postgresql_config"
		)
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
	" Mutations for type 'comment' "
	deleteComment(id: ID!): comment
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "comment"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertComment(username: String, post_id: ID, text: String): comment
		@dbquery(
			type: "postgresql"
			table: "comment"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateComment(
		id: ID!
		created_at: DateTime
		post_id: ID
		text: String
		username: String
	): comment
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "comment" SET
			  "created_at" = COALESCE($2, "created_at"),
			  "post_id" = COALESCE($3, "post_id"),
			  "text" = COALESCE($4, "text"),
			  "username" = COALESCE($5, "username")
			WHERE
			  "id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'post' "
	deletePost(id: ID!): post
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "post"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertPost(
		body: String
		subreddit_id: ID
		title: String
		username: String
		image: String
	): post
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "post"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updatePost(
		id: ID!
		body: String
		created_at: DateTime
		image: String
		subreddit_id: ID
		title: String
		username: String
	): post
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "post" SET
			  "body" = COALESCE($2, "body"),
			  "created_at" = COALESCE($3, "created_at"),
			  "image" = COALESCE($4, "image"),
			  "subreddit_id" = COALESCE($5, "subreddit_id"),
			  "title" = COALESCE($6, "title"),
			  "username" = COALESCE($7, "username")
			WHERE
			  "id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'subreddit' "
	deleteSubreddit(id: ID!): subreddit
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertSubreddit(topic: String, created_at: DateTime): subreddit
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "subreddit"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateSubreddit(id: ID!, created_at: DateTime, topic: String): subreddit
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "subreddit" SET
			  "created_at" = COALESCE($2, "created_at"),
			  "topic" = COALESCE($3, "topic")
			WHERE
			  "id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'vote' "
	deleteVote(id: ID!): vote
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "vote"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertVote(username: String, post_id: ID, upvote: Boolean): vote
		@dbquery(
			type: "postgresql"
			table: "vote"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateVote(
		id: ID!
		created_at: DateTime
		post_id: ID
		upvote: Boolean
		username: String
	): vote
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "vote" SET
			  "created_at" = COALESCE($2, "created_at"),
			  "post_id" = COALESCE($3, "post_id"),
			  "upvote" = COALESCE($4, "upvote"),
			  "username" = COALESCE($5, "username")
			WHERE
			  "id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
}
